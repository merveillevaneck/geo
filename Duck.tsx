/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, PerspectiveCamera } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Mesh } from 'three'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    LOD3spShape: THREE.Mesh
  }
  materials: {
    ['blinn3-fx']: THREE.MeshStandardMaterial
  }
}

export function Duck(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/Duck.gltf') as GLTFResult
  const mesh = useRef<Mesh>(null!)
  useFrame(({clock}) => {
    if (!mesh.current) return;
    mesh.current.rotation.y = -clock.getElapsedTime() / 10;
    mesh.current.position.set(
      mesh.current.position.x + clock.getElapsedTime() / 10,
      mesh.current.position.y + clock.getElapsedTime() / 20,
      mesh.current.position.z + clock.getElapsedTime() / 15,
    )
  });
  return (
    <group {...props} scale={2} dispose={null}>
      <group scale={0.01}>
        <mesh ref={mesh} rotation={[0, Math.PI / 4, Math.PI / 4]} geometry={nodes.LOD3spShape.geometry} material={materials['blinn3-fx']} />
      </group>
    </group>
  )
}

useGLTF.preload('/Duck.gltf')
